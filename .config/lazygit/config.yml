gui:
    branchColors:
        'good': '#009900'
    # stuff relating to the UI
    scrollHeight: 2 # how many lines you scroll by
    scrollPastBottom: true # enable scrolling past the bottom
    sidePanelWidth: 0.3333 # number from 0 to 1
    expandFocusedSidePanel: false
    mainPanelSplitMode: 'flexible' # one of 'horizontal' | 'flexible' | 'vertical'
    language: 'auto' # one of 'auto' | 'en' | 'zh' | 'pl' | 'nl' | 'ja' | 'ko'
    timeFormat: '02 Jan 06 15:04 MST' # https://pkg.go.dev/time#Time.Format
    theme:
        lightTheme: false # For terminals with a light background
        activeBorderColor:
            - green
            - bold
        inactiveBorderColor:
            - white
        optionsTextColor:
            - red
        selectedLineBgColor:
            - '#001122' # set to `default` to have no background colour
        selectedRangeBgColor:
            - blue
        cherryPickedCommitBgColor:
            - cyan
        cherryPickedCommitFgColor:
            - blue
        unstagedChangesColor:
            - red
    commitLength:
        show: true
    mouseEvents: true
    skipDiscardChangeWarning: false
    skipStashWarning: false
    showFileTree: true # for rendering changes files in a tree format
    showListFooter: true # for seeing the '5 of 20' message in list panels
    showRandomTip: true
    showBottomLine: true # for hiding the bottom information line (unless it has important information to tell you)
    showCommandLog: true
    showIcons: true
    commandLogSize: 8
    splitDiff: 'auto' # one of 'auto' | 'always'
git:
    paging:
        colorArg: always
        useConfig: true
        # pager: delta --dark --paging=never
    commit:
        signOff: false
    merging:
        # only applicable to unix users
        manualCommit: false
        # extra args passed to `git merge`, e.g. --no-ff
        args: ''
    log:
        # one of date-order, author-date-order, topo-order.
        # topo-order makes it easier to read the git log graph, but commits may not
        # appear chronologically. See https://git-scm.com/docs/git-log#_commit_ordering
        order: 'topo-order'
        # one of always, never, when-maximised
        # this determines whether the git graph is rendered in the commits panel
        showGraph: 'when-maximised'
        # displays the whole git graph by default in the commits panel (equivalent to passing the `--all` argument to `git log`)
        showWholeGraph: false
    skipHookPrefix: WIP
    autoFetch: false
    autoRefresh: true
    branchLogCmd: 'git log --graph --color=always --abbrev-commit --decorate --date=relative --pretty=medium {{branchName}} --'
    allBranchesLogCmd: 'git log --graph --all --color=always --abbrev-commit --decorate --date=relative  --pretty=medium'
    overrideGpg: false # prevents lazygit from spawning a separate process when using GPG
    disableForcePushing: false
    parseEmoji: false
    diffContextSize: 3 # how many lines of context are shown around a change in diffs
os:
    editCommand: 'nvim' # see 'Configuring File Editing' section
    editCommandTemplate: ''
    openCommand: 'xdg-open'
refresher:
    refreshInterval: 10 # File/submodule refresh interval in seconds. Auto-refresh can be disabled via option 'git.autoRefresh'.
    fetchInterval: 60 # Re-fetch interval in seconds. Auto-fetch can be disabled via option 'git.autoFetch'.
update:
    method: prompt # can be: prompt | background | never
    days: 14 # how often an update is checked for
reporting: 'undetermined' # one of: 'on' | 'off' | 'undetermined'
confirmOnQuit: false
# determines whether hitting 'esc' will quit the application when there is nothing to cancel/close
quitOnTopLevelReturn: false
disableStartupPopups: false
notARepository: 'prompt' # one of: 'prompt' | 'create' | 'skip'
promptToReturnFromSubprocess: true # display confirmation when subprocess terminates
customCommands:
    - key: '<c-r>'
      command: "git {{if .SelectedFile.HasUnstagedChanges}} add {{else}} restore --staged {{end}} {{.SelectedFile.Name}}"
      context: 'files'
      description: 'toggle file staged'
    - key: 'C'
      command: "git commit"
      context: 'global'
      subprocess: true
    - key: '<c-n>'
      prompts:
        - type: 'menu'
          title: 'What kind of branch is it?'
          options:
            - name: 'feature'
              description: 'a feature branch'
              value: 'feature'
            - name: 'hotfix'
              description: 'a hotfix branch'
              value: 'hotfix'
            - name: 'release'
              description: 'a release branch'
              value: 'release'
        - type: 'input'
          title: 'What is the new branch name?'
          initialValue: ''
      command: "git branch {{if .PromptResponses 0}}{{ .PromptResponses 0 }}{{end}}{{if .PromptResponses 1}}{{ .PromptResponses 1 }}{{end}}"
      context: 'localBranches'
      loadingText: 'creating branch'
